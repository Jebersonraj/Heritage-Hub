Directory structure:
└── components/
    ├── about-page.tsx
    ├── analytics-dashboard.tsx
    ├── chart.tsx
    ├── chat-interface.tsx
    ├── exhibition-listing.tsx
    ├── floating-action-button.tsx
    ├── floating-chat.tsx
    ├── footer.tsx
    ├── header.tsx
    ├── landing-page.tsx
    ├── login-form.tsx
    ├── logout-confirmation.tsx
    ├── mode-toggle.tsx
    ├── museum-listing.tsx
    ├── profile-page.tsx
    ├── theme-provider.tsx
    ├── ticket-management.tsx
    └── ui/
        ├── alert-dialog.tsx
        ├── avatar.tsx
        ├── badge.tsx
        ├── button.tsx
        ├── card.tsx
        ├── chart.tsx
        ├── dialog.tsx
        ├── input.tsx
        ├── label.tsx
        ├── select.tsx
        ├── separator.tsx
        ├── sheet.tsx
        ├── signup-form.tsx
        ├── switch.tsx
        └── tabs.tsx

================================================
File: about-page.tsx
================================================
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { ArrowLeft, Building2, Clock, MessageSquare, Users } from "lucide-react"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"

export function AboutPage() {
  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 p-4 md:p-6">
        <div className="mx-auto max-w-4xl">
          <div className="mb-6 flex items-center gap-2">
            <Link href="/">
              <Button variant="ghost" size="icon">
                <ArrowLeft className="h-5 w-5" />
                <span className="sr-only">Back</span>
              </Button>
            </Link>
            <h1 className="text-2xl font-bold">About Heritage Hub</h1>
          </div>

          <div className="space-y-8">
            {/* Hero Section */}
            <div className="relative overflow-hidden rounded-lg">
              <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-primary/5"></div>
              <div className="relative p-8 md:p-12">
                <h2 className="mb-4 text-3xl font-bold tracking-tight">Our Mission</h2>
                <p className="max-w-3xl text-lg text-muted-foreground">
                  Heritage Hub is dedicated to making cultural experiences more accessible through innovative ticketing
                  solutions. We believe that everyone should have the opportunity to explore and appreciate our shared
                  cultural heritage without barriers.
                </p>
              </div>
            </div>

            {/* About Content */}
            <div className="prose prose-lg max-w-none dark:prose-invert">
              <p>
                Heritage Hub was founded in 2023 with a simple goal: to revolutionize how people access museums and
                cultural institutions. Our chatbot-driven ticketing system streamlines the booking process, reduces wait
                times, and enhances the overall visitor experience.
              </p>

              <h3>What We Offer</h3>
              <p>
                Our platform connects visitors with museums through an intuitive, conversation-based interface. Whether
                you're planning a visit to a world-renowned art gallery or a local historical museum, Heritage Hub makes
                it easy to find information, book tickets, and manage your cultural experiences.
              </p>

              <div className="my-8 grid gap-6 md:grid-cols-2">
                <Card>
                  <CardContent className="flex flex-col items-center p-6 text-center">
                    <div className="mb-4 rounded-full bg-primary/10 p-3 text-primary">
                      <MessageSquare className="h-6 w-6" />
                    </div>
                    <h3 className="mb-2 text-lg font-semibold">Intelligent Chatbot</h3>
                    <p className="text-sm text-muted-foreground">
                      Our AI-powered chatbot provides personalized assistance in multiple languages, helping you find
                      the perfect museum experience.
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="flex flex-col items-center p-6 text-center">
                    <div className="mb-4 rounded-full bg-primary/10 p-3 text-primary">
                      <Clock className="h-6 w-6" />
                    </div>
                    <h3 className="mb-2 text-lg font-semibold">Queue Management</h3>
                    <p className="text-sm text-muted-foreground">
                      Skip the lines with our digital ticketing system, allowing you to make the most of your museum
                      visit.
                    </p>
                  </CardContent>
                </Card>
              </div>

              <h3>Our Partners</h3>
              <p>
                We collaborate with museums and cultural institutions across the country to provide seamless ticketing
                solutions. Our partners include national museums, art galleries, science centers, and historical sites.
              </p>

              <div className="my-8 grid gap-6 md:grid-cols-3">
                <div className="flex flex-col items-center">
                  <Building2 className="h-12 w-12 text-primary mb-2" />
                  <p className="text-center font-medium">National Museum of Art</p>
                </div>
                <div className="flex flex-col items-center">
                  <Building2 className="h-12 w-12 text-primary mb-2" />
                  <p className="text-center font-medium">Natural History Museum</p>
                </div>
                <div className="flex flex-col items-center">
                  <Building2 className="h-12 w-12 text-primary mb-2" />
                  <p className="text-center font-medium">Science & Technology Museum</p>
                </div>
              </div>

              <h3>Our Team</h3>
              <p>
                Heritage Hub is powered by a dedicated team of museum enthusiasts, technology experts, and customer
                service professionals. We're united by our passion for making cultural experiences more accessible to
                everyone.
              </p>

              <div className="my-8 flex justify-center">
                <div className="flex flex-col items-center">
                  <div className="mb-4 rounded-full bg-primary/10 p-6">
                    <Users className="h-12 w-12 text-primary" />
                  </div>
                  <p className="text-center text-lg font-medium">A team of passionate professionals</p>
                  <p className="text-center text-sm text-muted-foreground">
                    Working together to enhance cultural experiences
                  </p>
                </div>
              </div>
            </div>

            {/* CTA Section */}
            <div className="rounded-lg bg-primary/5 p-8 text-center">
              <h3 className="mb-4 text-2xl font-bold">Ready to Experience Heritage Hub?</h3>
              <p className="mb-6 text-muted-foreground">
                Start booking museum tickets with our intelligent chatbot today.
              </p>
              <Link href="/chat">
                <Button size="lg" className="gap-1">
                  <MessageSquare className="h-4 w-4" />
                  Try the Chatbot
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  )
}




================================================
File: analytics-dashboard.tsx
================================================
"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  BarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "@/components/ui/chart"
import {
  ArrowDown,
  ArrowUp,
  BarChart3,
  Clock,
  DollarSign,
  Download,
  LineChartIcon,
  PieChartIcon,
  Ticket,
  Users,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"

// Mock data for charts
const visitorData = [
  { name: "Jan", visitors: 4000 },
  { name: "Feb", visitors: 3000 },
  { name: "Mar", visitors: 2000 },
  { name: "Apr", visitors: 2780 },
  { name: "May", visitors: 1890 },
  { name: "Jun", visitors: 2390 },
  { name: "Jul", visitors: 3490 },
  { name: "Aug", visitors: 4000 },
  { name: "Sep", visitors: 3200 },
  { name: "Oct", visitors: 2800 },
  { name: "Nov", visitors: 3300 },
  { name: "Dec", visitors: 3500 },
]

const revenueData = [
  { name: "Jan", revenue: 10000 },
  { name: "Feb", revenue: 8000 },
  { name: "Mar", revenue: 5000 },
  { name: "Apr", revenue: 7000 },
  { name: "May", revenue: 4500 },
  { name: "Jun", revenue: 6000 },
  { name: "Jul", revenue: 8500 },
  { name: "Aug", revenue: 9500 },
  { name: "Sep", revenue: 7800 },
  { name: "Oct", revenue: 6500 },
  { name: "Nov", revenue: 8200 },
  { name: "Dec", revenue: 9000 },
]

const museumData = [
  { name: "National Museum of Art", visitors: 4500 },
  { name: "Natural History Museum", visitors: 3800 },
  { name: "Science & Technology Museum", visitors: 3200 },
  { name: "Modern Art Gallery", visitors: 2500 },
]

const demographicData = [
  { name: "Adults", value: 65 },
  { name: "Children", value: 20 },
  { name: "Seniors", value: 15 },
]

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884D8"]

export function AnalyticsDashboard() {
  const [timeRange, setTimeRange] = useState("year")

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 p-4 md:p-6">
        <div className="mx-auto max-w-7xl">
          <div className="mb-6 flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
            <h1 className="text-2xl font-bold">Analytics Dashboard</h1>
            <div className="flex items-center gap-2">
              <Select value={timeRange} onValueChange={setTimeRange}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select time range" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="week">Last Week</SelectItem>
                  <SelectItem value="month">Last Month</SelectItem>
                  <SelectItem value="quarter">Last Quarter</SelectItem>
                  <SelectItem value="year">Last Year</SelectItem>
                </SelectContent>
              </Select>
              <Button variant="outline" size="icon">
                <Download className="h-4 w-4" />
                <span className="sr-only">Download report</span>
              </Button>
            </div>
          </div>

          {/* Summary Cards */}
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <SummaryCard
              title="Total Visitors"
              value="42,890"
              change="+12.5%"
              trend="up"
              icon={<Users className="h-5 w-5" />}
            />
            <SummaryCard
              title="Total Revenue"
              value="â‚¹85,420"
              change="+8.2%"
              trend="up"
              icon={<DollarSign className="h-5 w-5" />}
            />
            <SummaryCard
              title="Tickets Sold"
              value="38,450"
              change="+5.7%"
              trend="up"
              icon={<Ticket className="h-5 w-5" />}
            />
            <SummaryCard
              title="Avg. Visit Duration"
              value="1h 45m"
              change="-3.2%"
              trend="down"
              icon={<Clock className="h-5 w-5" />}
            />
          </div>

          {/* Charts */}
          <Tabs defaultValue="visitors" className="mt-6">
            <TabsList className="grid w-full max-w-md grid-cols-3">
              <TabsTrigger value="visitors" className="flex items-center gap-2">
                <LineChartIcon className="h-4 w-4" />
                Visitors
              </TabsTrigger>
              <TabsTrigger value="revenue" className="flex items-center gap-2">
                <BarChart3 className="h-4 w-4" />
                Revenue
              </TabsTrigger>
              <TabsTrigger value="demographics" className="flex items-center gap-2">
                <PieChartIcon className="h-4 w-4" />
                Demographics
              </TabsTrigger>
            </TabsList>

            <TabsContent value="visitors" className="mt-4 space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Visitor Trends</CardTitle>
                  <CardDescription>Number of visitors over time</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[400px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart
                        data={visitorData}
                        margin={{
                          top: 5,
                          right: 30,
                          left: 20,
                          bottom: 5,
                        }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Line type="monotone" dataKey="visitors" stroke="#8884d8" activeDot={{ r: 8 }} />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Visitors by Museum</CardTitle>
                  <CardDescription>Distribution of visitors across different museums</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[400px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={museumData}
                        margin={{
                          top: 5,
                          right: 30,
                          left: 20,
                          bottom: 5,
                        }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="visitors" fill="#8884d8" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="revenue" className="mt-4 space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Revenue Trends</CardTitle>
                  <CardDescription>Revenue generated over time</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[400px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={revenueData}
                        margin={{
                          top: 5,
                          right: 30,
                          left: 20,
                          bottom: 5,
                        }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="revenue" fill="#82ca9d" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>

              <div className="grid gap-4 md:grid-cols-2">
                <Card>
                  <CardHeader>
                    <CardTitle>Revenue by Ticket Type</CardTitle>
                    <CardDescription>Distribution of revenue by ticket type</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[300px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={[
                              { name: "Adult", value: 65000 },
                              { name: "Child", value: 15000 },
                              { name: "Senior", value: 10000 },
                              { name: "Group", value: 25000 },
                            ]}
                            cx="50%"
                            cy="50%"
                            labelLine={false}
                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                            outerRadius={80}
                            fill="#8884d8"
                            dataKey="value"
                          >
                            {demographicData.map((entry, index) => (
                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                          </Pie>
                          <Tooltip />
                        </PieChart>
                      </ResponsiveContainer>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Revenue by Museum</CardTitle>
                    <CardDescription>Distribution of revenue across museums</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[300px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={[
                              { name: "National Museum of Art", value: 45000 },
                              { name: "Natural History Museum", value: 38000 },
                              { name: "Science & Technology Museum", value: 32000 },
                              { name: "Modern Art Gallery", value: 25000 },
                            ]}
                            cx="50%"
                            cy="50%"
                            labelLine={false}
                            label={({ name, percent }) => `${name.split(" ")[0]}: ${(percent * 100).toFixed(0)}%`}
                            outerRadius={80}
                            fill="#8884d8"
                            dataKey="value"
                          >
                            {museumData.map((entry, index) => (
                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                          </Pie>
                          <Tooltip />
                        </PieChart>
                      </ResponsiveContainer>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="demographics" className="mt-4 space-y-4">
              <div className="grid gap-4 md:grid-cols-2">
                <Card>
                  <CardHeader>
                    <CardTitle>Visitor Demographics</CardTitle>
                    <CardDescription>Distribution of visitors by age group</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[300px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={demographicData}
                            cx="50%"
                            cy="50%"
                            labelLine={false}
                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                            outerRadius={80}
                            fill="#8884d8"
                            dataKey="value"
                          >
                            {demographicData.map((entry, index) => (
                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                          </Pie>
                          <Tooltip />
                        </PieChart>
                      </ResponsiveContainer>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Visitor Origin</CardTitle>
                    <CardDescription>Distribution of visitors by geographical origin</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[300px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={[
                              { name: "Local", value: 45 },
                              { name: "Domestic", value: 35 },
                              { name: "International", value: 20 },
                            ]}
                            cx="50%"
                            cy="50%"
                            labelLine={false}
                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                            outerRadius={80}
                            fill="#8884d8"
                            dataKey="value"
                          >
                            {[0, 1, 2].map((index) => (
                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                          </Pie>
                          <Tooltip />
                        </PieChart>
                      </ResponsiveContainer>
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Language Preferences</CardTitle>
                  <CardDescription>Distribution of chatbot interactions by language</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[400px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={[
                          { name: "English", value: 65 },
                          { name: "Spanish", value: 12 },
                          { name: "French", value: 8 },
                          { name: "German", value: 6 },
                          { name: "Chinese", value: 5 },
                          { name: "Japanese", value: 4 },
                        ]}
                        margin={{
                          top: 5,
                          right: 30,
                          left: 20,
                          bottom: 5,
                        }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="value" fill="#8884d8" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </main>

      <Footer />
    </div>
  )
}

function SummaryCard({
  title,
  value,
  change,
  trend,
  icon,
}: {
  title: string
  value: string
  change: string
  trend: "up" | "down"
  icon: React.ReactNode
}) {
  return (
    <Card>
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <p className="text-sm text-muted-foreground">{title}</p>
            <p className="text-2xl font-bold">{value}</p>
          </div>
          <div className="rounded-full bg-primary/10 p-2 text-primary">{icon}</div>
        </div>
        <div className="mt-4 flex items-center gap-1 text-sm">
          {trend === "up" ? (
            <ArrowUp className="h-4 w-4 text-green-500" />
          ) : (
            <ArrowDown className="h-4 w-4 text-red-500" />
          )}
          <span className={trend === "up" ? "text-green-500" : "text-red-500"}>{change}</span>
          <span className="text-muted-foreground">vs. previous period</span>
        </div>
      </CardContent>
    </Card>
  )
}




================================================
File: chart.tsx
================================================
export {
  BarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts"
import type {
  BarChart as BarChartRecharts,
  Bar as BarRecharts,
  LineChart as LineChartRecharts,
  Line as LineRecharts,
  PieChart as PieChartRecharts,
  Pie as PieRecharts,
  Cell as CellRecharts,
  XAxis as XAxisRecharts,
  YAxis as YAxisRecharts,
  CartesianGrid as CartesianGridRecharts,
  Tooltip as TooltipRecharts,
  Legend as LegendRecharts,
  ResponsiveContainer as ResponsiveContainerRecharts,
} from "recharts"

type BarChart = typeof BarChartRecharts
type Bar = typeof BarRecharts
type LineChart = typeof LineChartRecharts
type Line = typeof LineRecharts
type PieChart = typeof PieChartRecharts
type Pie = typeof PieRecharts
type Cell = typeof CellRecharts
type XAxis = typeof XAxisRecharts
type YAxis = typeof YAxisRecharts
type CartesianGrid = typeof CartesianGridRecharts
type Tooltip = typeof TooltipRecharts
type Legend = typeof LegendRecharts
type ResponsiveContainer = typeof ResponsiveContainerRecharts

export type {
  BarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
}




================================================
File: chat-interface.tsx
================================================
"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { ArrowLeft, Calendar, Clock, Loader2, MessageSquare, Send, Ticket, User, Building2 } from "lucide-react"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"
import Link from "next/link"

// Types for our chat messages
type MessageType = {
  id: string
  role: "user" | "assistant" | "system"
  content: string
  timestamp: Date
}

// Types for ticket booking state
type TicketBookingState = {
  museum?: string
  date?: string
  time?: string
  adults?: number
  children?: number
  totalPrice?: number
  paymentMethod?: string
  status?: "selecting" | "confirming" | "payment" | "complete"
}

export function ChatInterface() {
  const [messages, setMessages] = useState<MessageType[]>([
    {
      id: "welcome",
      role: "assistant",
      content: "Hello! I'm your Heritage Hub assistant. How can I help you with museum tickets today?",
      timestamp: new Date(),
    },
  ])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [language, setLanguage] = useState("english")
  const [bookingState, setBookingState] = useState<TicketBookingState>({
    status: "selecting",
  })
  const [showTicketPanel, setShowTicketPanel] = useState(false)
  const [showPaymentQR, setShowPaymentQR] = useState(false)

  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Scroll to bottom of messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // Handle sending a message
  const handleSendMessage = async () => {
    if (!input.trim()) return

    const userMessage: MessageType = {
      id: Date.now().toString(),
      role: "user",
      content: input,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    try {
      // Process the message to determine intent
      if (
        input.toLowerCase().includes("ticket") ||
        input.toLowerCase().includes("book") ||
        input.toLowerCase().includes("museum")
      ) {
        // Start ticket booking flow
        setShowTicketPanel(true)
        setBookingState({
          status: "selecting",
          museum: "National Museum of Art",
          adults: 1,
          children: 0,
          totalPrice: 15.0,
        })

        const response: MessageType = {
          id: (Date.now() + 1).toString(),
          role: "assistant",
          content: "I'd be happy to help you book museum tickets! Please select your preferences in the ticket panel.",
          timestamp: new Date(),
        }
        setMessages((prev) => [...prev, response])
      } else {
        // Use AI to generate a response
        const { text } = await generateText({
          model: openai("gpt-4o"),
          prompt: `User: ${input}\nYou are a helpful museum ticketing assistant. Respond in ${language}.`,
          system:
            "You are a helpful museum ticketing assistant for Heritage Hub. Keep responses concise and focused on helping users book museum tickets, learn about exhibitions, or get information about museums. If users want to book tickets, guide them to use the booking system.",
        })

        const response: MessageType = {
          id: (Date.now() + 1).toString(),
          role: "assistant",
          content: text,
          timestamp: new Date(),
        }
        setMessages((prev) => [...prev, response])
      }
    } catch (error) {
      console.error("Error generating response:", error)
      const errorMessage: MessageType = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: "I'm sorry, I encountered an error processing your request. Please try again.",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  // Handle pressing Enter to send message
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  // Handle ticket booking steps
  const handleContinueBooking = () => {
    if (bookingState.status === "selecting") {
      setBookingState({ ...bookingState, status: "confirming" })
    } else if (bookingState.status === "confirming") {
      setBookingState({ ...bookingState, status: "payment" })
      setShowPaymentQR(true)
    } else if (bookingState.status === "payment") {
      // Simulate payment completion
      setBookingState({ ...bookingState, status: "complete" })
      setShowPaymentQR(false)

      const confirmationMessage: MessageType = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content:
          "Great news! Your payment has been confirmed. Your tickets have been booked successfully. You can view your tickets in the 'My Tickets' section.",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, confirmationMessage])
    }
  }

  // Handle updating ticket details
  const updateTicketDetails = (field: string, value: any) => {
    setBookingState((prev) => {
      const updated = { ...prev, [field]: value }

      // Recalculate price when adults or children change
      if (field === "adults" || field === "children") {
        const adultPrice = 15
        const childPrice = 8
        updated.totalPrice = (updated.adults || 0) * adultPrice + (updated.children || 0) * childPrice
      }

      return updated
    })
  }

  // Handle language change
  const handleLanguageChange = (value: string) => {
    setLanguage(value)

    // Add a system message about language change
    const languageMessage: MessageType = {
      id: Date.now().toString(),
      role: "system",
      content: `Language changed to ${value}. The assistant will now respond in ${value}.`,
      timestamp: new Date(),
    }
    setMessages((prev) => [...prev, languageMessage])
  }

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex flex-1 flex-col md:flex-row">
        <div className="flex-1 p-4 md:p-6">
          <div className="mx-auto max-w-4xl">
            <div className="mb-4 flex items-center gap-2">
              <Link href="/">
                <Button variant="ghost" size="icon">
                  <ArrowLeft className="h-5 w-5" />
                  <span className="sr-only">Back</span>
                </Button>
              </Link>
              <h1 className="text-2xl font-bold">Heritage Hub Assistant</h1>
            </div>

            <Card className="mb-4">
              <CardHeader className="pb-2">
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <MessageSquare className="h-5 w-5" />
                    Chat
                  </CardTitle>
                  <Select value={language} onValueChange={handleLanguageChange}>
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Language" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="english">English</SelectItem>
                      <SelectItem value="spanish">Spanish</SelectItem>
                      <SelectItem value="french">French</SelectItem>
                      <SelectItem value="german">German</SelectItem>
                      <SelectItem value="chinese">Chinese</SelectItem>
                      <SelectItem value="japanese">Japanese</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardHeader>
              <CardContent>
                <div className="h-[50vh] overflow-y-auto space-y-4 p-1">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
                    >
                      <div
                        className={`max-w-[80%] rounded-lg px-4 py-2 ${
                          message.role === "user"
                            ? "bg-primary text-primary-foreground"
                            : message.role === "system"
                              ? "bg-muted text-muted-foreground text-sm italic"
                              : "bg-secondary text-secondary-foreground"
                        }`}
                      >
                        <p className="whitespace-pre-wrap">{message.content}</p>
                        <p className="mt-1 text-xs opacity-70">
                          {message.timestamp.toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                        </p>
                      </div>
                    </div>
                  ))}
                  {isLoading && (
                    <div className="flex justify-start">
                      <div className="max-w-[80%] rounded-lg bg-secondary px-4 py-2 text-secondary-foreground">
                        <div className="flex items-center gap-2">
                          <Loader2 className="h-4 w-4 animate-spin" />
                          <p>Thinking...</p>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>
              </CardContent>
              <CardFooter>
                <div className="flex w-full items-center space-x-2">
                  <Input
                    placeholder="Type your message..."
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyDown={handleKeyDown}
                    disabled={isLoading}
                  />
                  <Button type="submit" size="icon" disabled={isLoading || !input.trim()} onClick={handleSendMessage}>
                    <Send className="h-4 w-4" />
                    <span className="sr-only">Send</span>
                  </Button>
                </div>
              </CardFooter>
            </Card>
          </div>
        </div>

        {showTicketPanel && (
          <div className="border-t md:border-l md:border-t-0 w-full md:w-[400px] p-4 md:p-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Ticket className="h-5 w-5" />
                  Ticket Booking
                </CardTitle>
              </CardHeader>
              <CardContent>
                {bookingState.status === "selecting" && (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Museum</label>
                      <Select
                        value={bookingState.museum}
                        onValueChange={(value) => updateTicketDetails("museum", value)}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select museum" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="National Museum of Art">National Museum of Art</SelectItem>
                          <SelectItem value="Natural History Museum">Natural History Museum</SelectItem>
                          <SelectItem value="Science & Technology Museum">Science & Technology Museum</SelectItem>
                          <SelectItem value="Modern Art Gallery">Modern Art Gallery</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium">Date</label>
                      <Input
                        type="date"
                        value={bookingState.date}
                        onChange={(e) => updateTicketDetails("date", e.target.value)}
                        min={new Date().toISOString().split("T")[0]}
                      />
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium">Time</label>
                      <Select value={bookingState.time} onValueChange={(value) => updateTicketDetails("time", value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select time" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="09:00">09:00 AM</SelectItem>
                          <SelectItem value="10:00">10:00 AM</SelectItem>
                          <SelectItem value="11:00">11:00 AM</SelectItem>
                          <SelectItem value="12:00">12:00 PM</SelectItem>
                          <SelectItem value="13:00">01:00 PM</SelectItem>
                          <SelectItem value="14:00">02:00 PM</SelectItem>
                          <SelectItem value="15:00">03:00 PM</SelectItem>
                          <SelectItem value="16:00">04:00 PM</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Adults</label>
                        <Input
                          type="number"
                          min="0"
                          value={bookingState.adults}
                          onChange={(e) => updateTicketDetails("adults", Number.parseInt(e.target.value))}
                        />
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Children</label>
                        <Input
                          type="number"
                          min="0"
                          value={bookingState.children}
                          onChange={(e) => updateTicketDetails("children", Number.parseInt(e.target.value))}
                        />
                      </div>
                    </div>
                  </div>
                )}

                {bookingState.status === "confirming" && (
                  <div className="space-y-4">
                    <h3 className="font-medium">Booking Summary</h3>
                    <div className="rounded-lg bg-muted p-4 space-y-2">
                      <div className="flex justify-between">
                        <span className="flex items-center gap-2">
                          <Building2 className="h-4 w-4" />
                          Museum:
                        </span>
                        <span className="font-medium">{bookingState.museum}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="flex items-center gap-2">
                          <Calendar className="h-4 w-4" />
                          Date:
                        </span>
                        <span className="font-medium">{bookingState.date}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="flex items-center gap-2">
                          <Clock className="h-4 w-4" />
                          Time:
                        </span>
                        <span className="font-medium">{bookingState.time}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="flex items-center gap-2">
                          <User className="h-4 w-4" />
                          Tickets:
                        </span>
                        <span className="font-medium">
                          {bookingState.adults} Adult{bookingState.adults !== 1 ? "s" : ""},{bookingState.children}{" "}
                          Child{bookingState.children !== 1 ? "ren" : ""}
                        </span>
                      </div>
                      <div className="pt-2 border-t flex justify-between">
                        <span className="font-medium">Total Price:</span>
                        <span className="font-bold">â‚¹{bookingState.totalPrice?.toFixed(2)}</span>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium">Payment Method</label>
                      <Select
                        value={bookingState.paymentMethod}
                        onValueChange={(value) => updateTicketDetails("paymentMethod", value)}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select payment method" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="upi">UPI</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                )}

                {bookingState.status === "payment" && (
                  <div className="space-y-4">
                    <h3 className="font-medium text-center">Scan QR Code to Pay</h3>
                    <div className="flex justify-center">
                      <div className="bg-white p-4 rounded-lg">
                        <img src="https://avatars.githubusercontent.com/u/118333251?v=4" alt="UPI QR Code" className="w-48 h-48" />
                      </div>
                    </div>
                    <p className="text-center text-sm text-muted-foreground">
                      Amount: â‚¹{bookingState.totalPrice?.toFixed(2)}
                    </p>
                    <p className="text-center text-sm text-muted-foreground">UPI ID: heritagehub@upi</p>
                  </div>
                )}

                {bookingState.status === "complete" && (
                  <div className="space-y-4">
                    <div className="rounded-lg bg-primary/10 p-4 text-center">
                      <h3 className="font-medium text-primary mb-2">Booking Confirmed!</h3>
                      <p className="text-sm">
                        Your tickets have been booked successfully. A confirmation has been sent to your email.
                      </p>
                    </div>

                    <div className="rounded-lg bg-muted p-4 space-y-2">
                      <div className="flex justify-between">
                        <span>Booking ID:</span>
                        <span className="font-medium">HH-{Math.floor(100000 + Math.random() * 900000)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Museum:</span>
                        <span className="font-medium">{bookingState.museum}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Date & Time:</span>
                        <span className="font-medium">
                          {bookingState.date} at {bookingState.time}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Tickets:</span>
                        <span className="font-medium">
                          {bookingState.adults} Adult{bookingState.adults !== 1 ? "s" : ""},{bookingState.children}{" "}
                          Child{bookingState.children !== 1 ? "ren" : ""}
                        </span>
                      </div>
                    </div>

                    <div className="flex justify-center">
                      <Link href="/tickets">
                        <Button variant="outline" className="gap-2">
                          <Ticket className="h-4 w-4" />
                          View My Tickets
                        </Button>
                      </Link>
                    </div>
                  </div>
                )}
              </CardContent>

              {bookingState.status !== "complete" && (
                <CardFooter className="flex justify-between">
                  {bookingState.status !== "selecting" ? (
                    <Button
                      variant="outline"
                      onClick={() =>
                        setBookingState({
                          ...bookingState,
                          status: bookingState.status === "payment" ? "confirming" : "selecting",
                        })
                      }
                    >
                      Back
                    </Button>
                  ) : (
                    <Button variant="outline" onClick={() => setShowTicketPanel(false)}>
                      Cancel
                    </Button>
                  )}

                  <Button
                    onClick={handleContinueBooking}
                    disabled={
                      (bookingState.status === "selecting" &&
                        (!bookingState.museum || !bookingState.date || !bookingState.time || !bookingState.adults)) ||
                      (bookingState.status === "confirming" && !bookingState.paymentMethod)
                    }
                  >
                    {bookingState.status === "selecting"
                      ? "Continue"
                      : bookingState.status === "confirming"
                        ? "Proceed to Payment"
                        : "Confirm Payment"}
                  </Button>
                </CardFooter>
              )}
            </Card>
          </div>
        )}
      </main>

      <Footer />
    </div>
  )
}




================================================
File: exhibition-listing.tsx
================================================
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { ArrowLeft, Calendar, Filter, MessageSquare, Search } from "lucide-react"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"

// Mock exhibition data
const exhibitions = [
  {
    id: "1",
    title: "Renaissance Masterpieces",
    description: "A collection of Renaissance art masterpieces from around the world.",
    image: "/placeholder.svg?height=300&width=500",
    museum: "National Museum of Art",
    startDate: "2025-04-01",
    endDate: "2025-06-30",
    status: "current",
    featured: true,
  },
  {
    id: "2",
    title: "Dinosaurs: Giants of the Past",
    description: "Explore the fascinating world of dinosaurs through fossils and interactive displays.",
    image: "/placeholder.svg?height=300&width=500",
    museum: "Natural History Museum",
    startDate: "2025-03-15",
    endDate: "2025-08-15",
    status: "current",
    featured: true,
  },
  {
    id: "3",
    title: "Space Exploration: Journey to the Stars",
    description: "An immersive exhibition on space exploration and the future of interstellar travel.",
    image: "/placeholder.svg?height=300&width=500",
    museum: "Science & Technology Museum",
    startDate: "2025-05-01",
    endDate: "2025-09-30",
    status: "upcoming",
    featured: true,
  },
  {
    id: "4",
    title: "Contemporary Visions",
    description: "Showcasing works from emerging contemporary artists pushing boundaries in modern art.",
    image: "/placeholder.svg?height=300&width=500",
    museum: "Modern Art Gallery",
    startDate: "2025-04-15",
    endDate: "2025-07-15",
    status: "upcoming",
    featured: false,
  },
  {
    id: "5",
    title: "Ancient Civilizations",
    description: "Artifacts and stories from ancient civilizations that shaped human history.",
    image: "/placeholder.svg?height=300&width=500",
    museum: "Archaeological Museum",
    startDate: "2025-02-01",
    endDate: "2025-05-30",
    status: "current",
    featured: false,
  },
  {
    id: "6",
    title: "Ocean Wonders",
    description: "Discover the mysteries of the deep sea and marine life through interactive exhibits.",
    image: "/placeholder.svg?height=300&width=500",
    museum: "Maritime Museum",
    startDate: "2025-06-01",
    endDate: "2025-10-31",
    status: "upcoming",
    featured: false,
  },
  {
    id: "7",
    title: "Textile Traditions of India",
    description: "A celebration of India's rich textile heritage from different regions.",
    image: "/placeholder.svg?height=300&width=500",
    museum: "Cultural Heritage Museum",
    startDate: "2025-03-01",
    endDate: "2025-06-15",
    status: "current",
    featured: true,
  },
  {
    id: "8",
    title: "The Science of Light",
    description: "Interactive exhibits exploring the properties and applications of light in science and art.",
    image: "/placeholder.svg?height=300&width=500",
    museum: "Interactive Science Center",
    startDate: "2025-05-15",
    endDate: "2025-08-30",
    status: "upcoming",
    featured: false,
  },
]

export function ExhibitionListing() {
  const [searchQuery, setSearchQuery] = useState("")
  const [activeStatus, setActiveStatus] = useState("all")

  // Filter exhibitions based on search query and status
  const filteredExhibitions = exhibitions.filter((exhibition) => {
    const matchesSearch =
      exhibition.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      exhibition.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      exhibition.museum.toLowerCase().includes(searchQuery.toLowerCase())

    const matchesStatus = activeStatus === "all" || exhibition.status === activeStatus

    return matchesSearch && matchesStatus
  })

  // Filter exhibitions for the "Featured" category
  const featuredExhibitions = exhibitions.filter((exhibition) => exhibition.featured)

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 p-4 md:p-6">
        <div className="mx-auto max-w-7xl">
          <div className="mb-6 flex items-center gap-2">
            <Link href="/">
              <Button variant="ghost" size="icon">
                <ArrowLeft className="h-5 w-5" />
                <span className="sr-only">Back</span>
              </Button>
            </Link>
            <h1 className="text-2xl font-bold">Exhibitions</h1>
          </div>

          <div className="mb-6">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search exhibitions by title, description, or museum..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>

          <div className="flex items-center justify-between mb-6">
            <div className="flex gap-2">
              <Button
                variant={activeStatus === "all" ? "default" : "outline"}
                size="sm"
                onClick={() => setActiveStatus("all")}
              >
                All
              </Button>
              <Button
                variant={activeStatus === "current" ? "default" : "outline"}
                size="sm"
                onClick={() => setActiveStatus("current")}
              >
                Current
              </Button>
              <Button
                variant={activeStatus === "upcoming" ? "default" : "outline"}
                size="sm"
                onClick={() => setActiveStatus("upcoming")}
              >
                Upcoming
              </Button>
            </div>

            <Button variant="outline" size="sm" className="hidden md:flex gap-2">
              <Filter className="h-4 w-4" />
              Filter
            </Button>
          </div>

          {/* Featured Exhibitions */}
          {activeStatus === "all" && searchQuery === "" && (
            <div className="mb-8">
              <h2 className="text-xl font-semibold mb-4">Featured Exhibitions</h2>
              <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                {featuredExhibitions.map((exhibition) => (
                  <ExhibitionCard key={exhibition.id} exhibition={exhibition} />
                ))}
              </div>
            </div>
          )}

          {/* All Exhibitions */}
          <div>
            <h2 className="text-xl font-semibold mb-4">
              {activeStatus === "all"
                ? "All Exhibitions"
                : activeStatus === "current"
                  ? "Current Exhibitions"
                  : "Upcoming Exhibitions"}
            </h2>
            <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {filteredExhibitions.map((exhibition) => (
                <ExhibitionCard key={exhibition.id} exhibition={exhibition} />
              ))}
            </div>

            {filteredExhibitions.length === 0 && (
              <div className="flex flex-col items-center justify-center rounded-lg border border-dashed p-8 text-center">
                <h3 className="mt-4 text-lg font-semibold">No exhibitions found</h3>
                <p className="mt-2 text-sm text-muted-foreground">Try adjusting your search or filter criteria.</p>
              </div>
            )}
          </div>
        </div>
      </main>

      <Footer />
    </div>
  )
}

function ExhibitionCard({ exhibition }: { exhibition: (typeof exhibitions)[0] }) {
  return (
    <Card className="overflow-hidden">
      <div className="aspect-video w-full overflow-hidden">
        <img
          src={exhibition.image || "/placeholder.svg"}
          alt={exhibition.title}
          className="h-full w-full object-cover transition-transform hover:scale-105"
        />
      </div>
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle>{exhibition.title}</CardTitle>
            <CardDescription className="mt-1">{exhibition.museum}</CardDescription>
          </div>
          <Badge variant={exhibition.status === "current" ? "default" : "secondary"}>
            {exhibition.status === "current" ? "Current" : "Upcoming"}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <p className="line-clamp-3 text-sm text-muted-foreground">{exhibition.description}</p>
        <div className="mt-4 flex items-center text-sm text-muted-foreground">
          <Calendar className="mr-1 h-4 w-4" />
          <span>
            {new Date(exhibition.startDate).toLocaleDateString()} - {new Date(exhibition.endDate).toLocaleDateString()}
          </span>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Link href={`/exhibitions/${exhibition.id}`}>
          <Button variant="outline">View Details</Button>
        </Link>
        <Link href="/chat">
          <Button className="gap-1">
            <MessageSquare className="h-4 w-4" />
            Book Tickets
          </Button>
        </Link>
      </CardFooter>
    </Card>
  )
}




================================================
File: floating-action-button.tsx
================================================
"use client"

import { FloatingChat } from "@/components/floating-chat"

export function FloatingActionButton() {
  return <FloatingChat />
}




================================================
File: floating-chat.tsx
================================================
"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Building2, Calendar, Clock, Loader2, MessageSquare, MinusCircle, Send, Ticket, User, X } from "lucide-react"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"
import Link from "next/link"

// Types for our chat messages
type MessageType = {
  id: string
  role: "user" | "assistant" | "system"
  content: string
  timestamp: Date
}

// Types for ticket booking state
type TicketBookingState = {
  museum?: string
  date?: string
  time?: string
  adults?: number
  children?: number
  totalPrice?: number
  paymentMethod?: string
  status?: "selecting" | "confirming" | "payment" | "complete"
}

export function FloatingChat() {
  const [isOpen, setIsOpen] = useState(false)
  const [isExpanded, setIsExpanded] = useState(false)
  const [messages, setMessages] = useState<MessageType[]>([
    {
      id: "welcome",
      role: "assistant",
      content: "Hello! I'm your Heritage Hub assistant. How can I help you with museum tickets today?",
      timestamp: new Date(),
    },
  ])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [language, setLanguage] = useState("english")
  const [bookingState, setBookingState] = useState<TicketBookingState>({
    status: "selecting",
  })
  const [showTicketPanel, setShowTicketPanel] = useState(false)
  const [showPaymentQR, setShowPaymentQR] = useState(false)

  const messagesEndRef = useRef<HTMLDivElement>(null)
  const chatRef = useRef<HTMLDivElement>(null)

  // Scroll to bottom of messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // Handle clicking outside to close
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (chatRef.current && !chatRef.current.contains(event.target as Node) && isOpen) {
        setIsOpen(false)
      }
    }

    document.addEventListener("mousedown", handleClickOutside)
    return () => {
      document.removeEventListener("mousedown", handleClickOutside)
    }
  }, [isOpen])

  // Handle sending a message
  const handleSendMessage = async () => {
    if (!input.trim()) return

    const userMessage: MessageType = {
      id: Date.now().toString(),
      role: "user",
      content: input,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    try {
      // Process the message to determine intent
      if (
        input.toLowerCase().includes("ticket") ||
        input.toLowerCase().includes("book") ||
        input.toLowerCase().includes("museum")
      ) {
        // Start ticket booking flow
        setShowTicketPanel(true)
        setBookingState({
          status: "selecting",
          museum: "National Museum of Art",
          adults: 1,
          children: 0,
          totalPrice: 15.0,
        })

        const response: MessageType = {
          id: (Date.now() + 1).toString(),
          role: "assistant",
          content: "I'd be happy to help you book museum tickets! Please select your preferences in the ticket panel.",
          timestamp: new Date(),
        }
        setMessages((prev) => [...prev, response])
      } else {
        // Use AI to generate a response
        const { text } = await generateText({
          model: openai("gpt-4o"),
          prompt: `User: ${input}\nYou are a helpful museum ticketing assistant. Respond in ${language}.`,
          system:
            "You are a helpful museum ticketing assistant for Heritage Hub. Keep responses concise and focused on helping users book museum tickets, learn about exhibitions, or get information about museums. If users want to book tickets, guide them to use the booking system.",
        })

        const response: MessageType = {
          id: (Date.now() + 1).toString(),
          role: "assistant",
          content: text,
          timestamp: new Date(),
        }
        setMessages((prev) => [...prev, response])
      }
    } catch (error) {
      console.error("Error generating response:", error)
      const errorMessage: MessageType = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: "I'm sorry, I encountered an error processing your request. Please try again.",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  // Handle pressing Enter to send message
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  // Handle ticket booking steps
  const handleContinueBooking = () => {
    if (bookingState.status === "selecting") {
      setBookingState({ ...bookingState, status: "confirming" })
    } else if (bookingState.status === "confirming") {
      setBookingState({ ...bookingState, status: "payment" })
      setShowPaymentQR(true)
    } else if (bookingState.status === "payment") {
      // Simulate payment completion
      setBookingState({ ...bookingState, status: "complete" })
      setShowPaymentQR(false)

      const confirmationMessage: MessageType = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content:
          "Great news! Your payment has been confirmed. Your tickets have been booked successfully. You can view your tickets in the 'My Tickets' section.",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, confirmationMessage])
    }
  }

  // Handle updating ticket details
  const updateTicketDetails = (field: string, value: any) => {
    setBookingState((prev) => {
      const updated = { ...prev, [field]: value }

      // Recalculate price when adults or children change
      if (field === "adults" || field === "children") {
        const adultPrice = 15
        const childPrice = 8
        updated.totalPrice = (updated.adults || 0) * adultPrice + (updated.children || 0) * childPrice
      }

      return updated
    })
  }

  // Handle language change
  const handleLanguageChange = (value: string) => {
    setLanguage(value)

    // Add a system message about language change
    const languageMessage: MessageType = {
      id: Date.now().toString(),
      role: "system",
      content: `Language changed to ${value}. The assistant will now respond in ${value}.`,
      timestamp: new Date(),
    }
    setMessages((prev) => [...prev, languageMessage])
  }

  // Toggle chat open/closed
  const toggleChat = () => {
    setIsOpen(!isOpen)
    if (!isOpen) {
      setIsExpanded(false)
    }
  }

  // Toggle chat expanded/collapsed
  const toggleExpanded = () => {
    setIsExpanded(!isExpanded)
  }

  return (
    <>
      {/* Floating Action Button */}
      <Button className="fixed bottom-6 right-6 z-50 rounded-full shadow-lg h-14 w-14 p-0" onClick={toggleChat}>
        {isOpen ? <X className="h-6 w-6" /> : <MessageSquare className="h-6 w-6" />}
      </Button>

      {/* Floating Chat Window */}
      {isOpen && (
        <div
          ref={chatRef}
          className={`fixed bottom-24 right-6 z-50 w-[350px] md:w-[400px] rounded-lg shadow-lg transition-all duration-300 ease-in-out ${
            isExpanded ? "h-[80vh]" : "h-[500px]"
          }`}
        >
          <Card className="h-full flex flex-col">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <MessageSquare className="h-5 w-5" />
                Heritage Hub Assistant
              </CardTitle>
              <div className="flex items-center gap-1">
                <Button variant="ghost" size="icon" onClick={toggleExpanded} className="h-8 w-8">
                  <MinusCircle className="h-4 w-4" />
                </Button>
                <Button variant="ghost" size="icon" onClick={() => setIsOpen(false)} className="h-8 w-8">
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>

            <div className="flex flex-1 overflow-hidden">
              {/* Chat Messages */}
              <div className={`flex-1 overflow-hidden ${showTicketPanel ? "hidden md:block md:w-1/2" : "w-full"}`}>
                <div className="flex h-9 items-center justify-between border-b px-4">
                  <div className="flex items-center gap-2">
                    <span className="text-xs font-medium">Language:</span>
                    <Select value={language} onValueChange={handleLanguageChange}>
                      <SelectTrigger className="h-7 w-[120px] text-xs">
                        <SelectValue placeholder="Language" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="english">English</SelectItem>
                        <SelectItem value="spanish">Spanish</SelectItem>
                        <SelectItem value="french">French</SelectItem>
                        <SelectItem value="german">German</SelectItem>
                        <SelectItem value="chinese">Chinese</SelectItem>
                        <SelectItem value="japanese">Japanese</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="h-[calc(100%-80px)] overflow-y-auto space-y-4 p-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
                    >
                      <div
                        className={`max-w-[80%] rounded-lg px-4 py-2 ${
                          message.role === "user"
                            ? "bg-primary text-primary-foreground"
                            : message.role === "system"
                              ? "bg-muted text-muted-foreground text-sm italic"
                              : "bg-secondary text-secondary-foreground"
                        }`}
                      >
                        <p className="whitespace-pre-wrap">{message.content}</p>
                        <p className="mt-1 text-xs opacity-70">
                          {message.timestamp.toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                        </p>
                      </div>
                    </div>
                  ))}
                  {isLoading && (
                    <div className="flex justify-start">
                      <div className="max-w-[80%] rounded-lg bg-secondary px-4 py-2 text-secondary-foreground">
                        <div className="flex items-center gap-2">
                          <Loader2 className="h-4 w-4 animate-spin" />
                          <p>Thinking...</p>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>

                <div className="border-t p-2">
                  <div className="flex items-center space-x-2">
                    <Input
                      placeholder="Type your message..."
                      value={input}
                      onChange={(e) => setInput(e.target.value)}
                      onKeyDown={handleKeyDown}
                      disabled={isLoading}
                      className="flex-1"
                    />
                    <Button type="submit" size="icon" disabled={isLoading || !input.trim()} onClick={handleSendMessage}>
                      <Send className="h-4 w-4" />
                      <span className="sr-only">Send</span>
                    </Button>
                  </div>
                </div>
              </div>

              {/* Ticket Panel */}
              {showTicketPanel && (
                <div className={`${showTicketPanel ? "w-full md:w-1/2" : "hidden"} border-l`}>
                  <div className="flex h-9 items-center justify-between border-b px-4">
                    <span className="text-xs font-medium flex items-center gap-1">
                      <Ticket className="h-3 w-3" />
                      Ticket Booking
                    </span>
                    <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => setShowTicketPanel(false)}>
                      <X className="h-3 w-3" />
                    </Button>
                  </div>

                  <div className="h-[calc(100%-80px)] overflow-y-auto p-4">
                    {bookingState.status === "selecting" && (
                      <div className="space-y-4">
                        <div className="space-y-2">
                          <label className="text-sm font-medium">Museum</label>
                          <Select
                            value={bookingState.museum}
                            onValueChange={(value) => updateTicketDetails("museum", value)}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Select museum" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="National Museum of Art">National Museum of Art</SelectItem>
                              <SelectItem value="Natural History Museum">Natural History Museum</SelectItem>
                              <SelectItem value="Science & Technology Museum">Science & Technology Museum</SelectItem>
                              <SelectItem value="Modern Art Gallery">Modern Art Gallery</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <label className="text-sm font-medium">Date</label>
                          <Input
                            type="date"
                            value={bookingState.date}
                            onChange={(e) => updateTicketDetails("date", e.target.value)}
                            min={new Date().toISOString().split("T")[0]}
                          />
                        </div>

                        <div className="space-y-2">
                          <label className="text-sm font-medium">Time</label>
                          <Select
                            value={bookingState.time}
                            onValueChange={(value) => updateTicketDetails("time", value)}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Select time" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="09:00">09:00 AM</SelectItem>
                              <SelectItem value="10:00">10:00 AM</SelectItem>
                              <SelectItem value="11:00">11:00 AM</SelectItem>
                              <SelectItem value="12:00">12:00 PM</SelectItem>
                              <SelectItem value="13:00">01:00 PM</SelectItem>
                              <SelectItem value="14:00">02:00 PM</SelectItem>
                              <SelectItem value="15:00">03:00 PM</SelectItem>
                              <SelectItem value="16:00">04:00 PM</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <label className="text-sm font-medium">Adults</label>
                            <Input
                              type="number"
                              min="0"
                              value={bookingState.adults}
                              onChange={(e) => updateTicketDetails("adults", Number.parseInt(e.target.value))}
                            />
                          </div>
                          <div className="space-y-2">
                            <label className="text-sm font-medium">Children</label>
                            <Input
                              type="number"
                              min="0"
                              value={bookingState.children}
                              onChange={(e) => updateTicketDetails("children", Number.parseInt(e.target.value))}
                            />
                          </div>
                        </div>
                      </div>
                    )}

                    {bookingState.status === "confirming" && (
                      <div className="space-y-4">
                        <h3 className="font-medium">Booking Summary</h3>
                        <div className="rounded-lg bg-muted p-4 space-y-2">
                          <div className="flex justify-between">
                            <span className="flex items-center gap-2">
                              <Building2 className="h-4 w-4" />
                              Museum:
                            </span>
                            <span className="font-medium">{bookingState.museum}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="flex items-center gap-2">
                              <Calendar className="h-4 w-4" />
                              Date:
                            </span>
                            <span className="font-medium">{bookingState.date}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="flex items-center gap-2">
                              <Clock className="h-4 w-4" />
                              Time:
                            </span>
                            <span className="font-medium">{bookingState.time}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="flex items-center gap-2">
                              <User className="h-4 w-4" />
                              Tickets:
                            </span>
                            <span className="font-medium">
                              {bookingState.adults} Adult{bookingState.adults !== 1 ? "s" : ""},{bookingState.children}{" "}
                              Child{bookingState.children !== 1 ? "ren" : ""}
                            </span>
                          </div>
                          <div className="pt-2 border-t flex justify-between">
                            <span className="font-medium">Total Price:</span>
                            <span className="font-bold">â‚¹{bookingState.totalPrice?.toFixed(2)}</span>
                          </div>
                        </div>

                        <div className="space-y-2">
                          <label className="text-sm font-medium">Payment Method</label>
                          <Select
                            value={bookingState.paymentMethod}
                            onValueChange={(value) => updateTicketDetails("paymentMethod", value)}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Select payment method" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="upi">UPI</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    )}

                    {bookingState.status === "payment" && (
                      <div className="space-y-4">
                        <h3 className="font-medium text-center">Scan QR Code to Pay</h3>
                        <div className="flex justify-center">
                          <div className="bg-white p-4 rounded-lg">
                            <img src="/placeholder.svg?height=200&width=200" alt="UPI QR Code" className="w-48 h-48" />
                          </div>
                        </div>
                        <p className="text-center text-sm text-muted-foreground">
                          Amount: â‚¹{bookingState.totalPrice?.toFixed(2)}
                        </p>
                        <p className="text-center text-sm text-muted-foreground">UPI ID: heritagehub@upi</p>
                      </div>
                    )}

                    {bookingState.status === "complete" && (
                      <div className="space-y-4">
                        <div className="rounded-lg bg-primary/10 p-4 text-center">
                          <h3 className="font-medium text-primary mb-2">Booking Confirmed!</h3>
                          <p className="text-sm">
                            Your tickets have been booked successfully. A confirmation has been sent to your email.
                          </p>
                        </div>

                        <div className="rounded-lg bg-muted p-4 space-y-2">
                          <div className="flex justify-between">
                            <span>Booking ID:</span>
                            <span className="font-medium">HH-{Math.floor(100000 + Math.random() * 900000)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Museum:</span>
                            <span className="font-medium">{bookingState.museum}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Date & Time:</span>
                            <span className="font-medium">
                              {bookingState.date} at {bookingState.time}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span>Tickets:</span>
                            <span className="font-medium">
                              {bookingState.adults} Adult{bookingState.adults !== 1 ? "s" : ""},{bookingState.children}{" "}
                              Child{bookingState.children !== 1 ? "ren" : ""}
                            </span>
                          </div>
                        </div>

                        <div className="flex justify-center">
                          <Link href="/tickets">
                            <Button variant="outline" className="gap-2">
                              <Ticket className="h-4 w-4" />
                              View My Tickets
                            </Button>
                          </Link>
                        </div>
                      </div>
                    )}
                  </div>

                  {bookingState.status !== "complete" && (
                    <div className="border-t p-2 flex justify-between">
                      {bookingState.status !== "selecting" ? (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() =>
                            setBookingState({
                              ...bookingState,
                              status: bookingState.status === "payment" ? "confirming" : "selecting",
                            })
                          }
                        >
                          Back
                        </Button>
                      ) : (
                        <Button variant="outline" size="sm" onClick={() => setShowTicketPanel(false)}>
                          Cancel
                        </Button>
                      )}

                      <Button
                        size="sm"
                        onClick={handleContinueBooking}
                        disabled={
                          (bookingState.status === "selecting" &&
                            (!bookingState.museum ||
                              !bookingState.date ||
                              !bookingState.time ||
                              !bookingState.adults)) ||
                          (bookingState.status === "confirming" && !bookingState.paymentMethod)
                        }
                      >
                        {bookingState.status === "selecting"
                          ? "Continue"
                          : bookingState.status === "confirming"
                            ? "Proceed to Payment"
                            : "Confirm Payment"}
                      </Button>
                    </div>
                  )}
                </div>
              )}
            </div>
          </Card>
        </div>
      )}
    </>
  )
}




================================================
File: footer.tsx
================================================
export function Footer() {
  return (
    <footer className="bg-background border-t">
      <div className="container px-4 py-8 md:px-6 md:py-12">
        <div className="flex flex-col items-center justify-center text-center">
          <h3 className="text-lg font-semibold mb-2">Heritage Hub</h3>
          <p className="text-sm text-muted-foreground max-w-md mb-6">
            Streamlining museum experiences with intelligent ticketing solutions.
          </p>
          <div className="mt-4 border-t pt-4 text-center text-sm text-muted-foreground w-full">
            <p>Â© {new Date().getFullYear()} Heritage Hub. All rights reserved.</p>
          </div>
        </div>
      </div>
    </footer>
  )
}




================================================
File: header.tsx
================================================
"use client"

import { useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"
import { LogIn, LogOut, Menu, User } from "lucide-react"
import { ModeToggle } from "@/components/mode-toggle"
import { usePathname } from "next/navigation"

export function Header() {
  const [isOpen, setIsOpen] = useState(false)
  const [isLoggedIn, setIsLoggedIn] = useState(false) // This would be replaced with actual auth state
  const pathname = usePathname()

  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between">
        <div className="flex items-center gap-2">
          <Sheet open={isOpen} onOpenChange={setIsOpen}>
            <SheetTrigger asChild>
              <Button variant="ghost" size="icon" className="md:hidden">
                <Menu className="h-5 w-5" />
                <span className="sr-only">Toggle menu</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="pr-0">
              <MobileNav setIsOpen={setIsOpen} isLoggedIn={isLoggedIn} />
            </SheetContent>
          </Sheet>
          <Link href="/" className="flex items-center gap-2">
            <span className="text-xl font-bold">Heritage Hub</span>
          </Link>
        </div>
        <nav className="hidden md:flex md:gap-6">
          <Link
            href="/"
            className={`text-sm font-medium transition-colors hover:text-primary ${pathname === "/" ? "text-primary" : ""}`}
          >
            Home
          </Link>
          <Link
            href="/museums"
            className={`text-sm font-medium transition-colors hover:text-primary ${pathname === "/museums" ? "text-primary" : ""}`}
          >
            Museums
          </Link>
          <Link
            href="/exhibitions"
            className={`text-sm font-medium transition-colors hover:text-primary ${pathname === "/exhibitions" ? "text-primary" : ""}`}
          >
            Exhibitions
          </Link>
          <Link
            href="/tickets"
            className={`text-sm font-medium transition-colors hover:text-primary ${pathname === "/tickets" ? "text-primary" : ""}`}
          >
            My Tickets
          </Link>
          <Link
            href="/about"
            className={`text-sm font-medium transition-colors hover:text-primary ${pathname === "/about" ? "text-primary" : ""}`}
          >
            About
          </Link>
        </nav>
        <div className="flex items-center gap-2">
          <ModeToggle />

          {isLoggedIn ? (
            <>
              <Link href="/profile">
                <Button variant="ghost" size="icon" className="mr-1">
                  <User className="h-5 w-5" />
                  <span className="sr-only">Profile</span>
                </Button>
              </Link>
              <Link href="/logout" className="hidden md:block">
                <Button variant="outline" size="sm" className="gap-1">
                  <LogOut className="h-4 w-4" />
                  Logout
                </Button>
              </Link>
            </>
          ) : (
            <Link href="/login" className="hidden md:block">
              <Button variant="outline" size="sm" className="gap-1">
                <LogIn className="h-4 w-4" />
                Login
              </Button>
            </Link>
          )}
        </div>
      </div>
    </header>
  )
}

function MobileNav({
  setIsOpen,
  isLoggedIn,
}: {
  setIsOpen: (open: boolean) => void
  isLoggedIn: boolean
}) {
  return (
    <div className="flex flex-col gap-4 py-4">
      <Link
        href="/"
        className="text-sm font-medium transition-colors hover:text-primary"
        onClick={() => setIsOpen(false)}
      >
        Home
      </Link>
      <Link
        href="/museums"
        className="text-sm font-medium transition-colors hover:text-primary"
        onClick={() => setIsOpen(false)}
      >
        Museums
      </Link>
      <Link
        href="/exhibitions"
        className="text-sm font-medium transition-colors hover:text-primary"
        onClick={() => setIsOpen(false)}
      >
        Exhibitions
      </Link>
      <Link
        href="/tickets"
        className="text-sm font-medium transition-colors hover:text-primary"
        onClick={() => setIsOpen(false)}
      >
        My Tickets
      </Link>
      <Link
        href="/about"
        className="text-sm font-medium transition-colors hover:text-primary"
        onClick={() => setIsOpen(false)}
      >
        About
      </Link>

      {isLoggedIn ? (
        <>
          <Link
            href="/profile"
            className="text-sm font-medium transition-colors hover:text-primary"
            onClick={() => setIsOpen(false)}
          >
            Profile
          </Link>
          <Link
            href="/logout"
            className="text-sm font-medium transition-colors hover:text-primary"
            onClick={() => setIsOpen(false)}
          >
            <Button variant="outline" size="sm" className="gap-1 mt-2">
              <LogOut className="h-4 w-4" />
              Logout
            </Button>
          </Link>
        </>
      ) : (
        <Link
          href="/login"
          className="text-sm font-medium transition-colors hover:text-primary"
          onClick={() => setIsOpen(false)}
        >
          <Button variant="outline" size="sm" className="gap-1 mt-2">
            <LogIn className="h-4 w-4" />
            Login
          </Button>
        </Link>
      )}
    </div>
  )
}




================================================
File: landing-page.tsx
================================================
"use client"

import type React from "react"

import { useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Building2, Clock, Globe, MessageSquare, ShieldCheck, Ticket, TrendingUp, Wallet } from "lucide-react"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"

export function LandingPage() {
  const [activeTab, setActiveTab] = useState("features")

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1">
        {/* Hero Section */}
        <section className="relative bg-gradient-to-b from-primary/10 to-background py-20 md:py-32">
          <div className="container px-4 md:px-6">
            <div className="grid gap-6 lg:grid-cols-2 lg:gap-12 xl:grid-cols-2">
              <div className="flex flex-col justify-center space-y-4">
                <div className="space-y-2">
                  <h1 className="text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none">Heritage Hub</h1>
                  <p className="max-w-[600px] text-muted-foreground md:text-xl">
                    Streamline your museum experience with our intelligent chatbot ticketing system. Book tickets, skip
                    queues, and explore cultural heritage seamlessly.
                  </p>
                </div>
                <div className="flex flex-col gap-2 min-[400px]:flex-row">
                  <Link href="/chat">
                    <Button size="lg" className="gap-1">
                      <MessageSquare className="h-4 w-4" />
                      Book Tickets Now
                    </Button>
                  </Link>
                  <Link href="/dashboard">
                    <Button size="lg" variant="outline">
                      View Dashboard
                    </Button>
                  </Link>
                </div>
              </div>
              <div className="flex items-center justify-center">
                <Card className="w-full max-w-md overflow-hidden rounded-xl border-0 shadow-lg">
                  <CardContent className="p-0">
                    <img
                      alt="Museum Exhibition"
                      className="aspect-video object-cover"
                      src="/placeholder.svg?height=400&width=600"
                    />
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </section>

        {/* Features Section */}
        <section className="bg-background py-16 md:py-24">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-4 text-center">
              <div className="space-y-2">
                <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
                  Revolutionizing Museum Ticketing
                </h2>
                <p className="max-w-[900px] text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
                  Our chatbot-driven system enhances visitor experience with real-time ticketing, multilingual support,
                  and secure payments.
                </p>
              </div>
            </div>

            <Tabs defaultValue="features" value={activeTab} onValueChange={setActiveTab} className="mt-12">
              <div className="flex justify-center">
                <TabsList className="grid w-full max-w-md grid-cols-2">
                  <TabsTrigger value="features">Features</TabsTrigger>
                  <TabsTrigger value="benefits">Benefits</TabsTrigger>
                </TabsList>
              </div>

              <TabsContent value="features" className="mt-8">
                <div className="grid gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
                  <FeatureCard
                    icon={<Ticket />}
                    title="Real-Time Ticketing"
                    description="Instantaneous booking and confirmation, minimizing delays."
                  />
                  <FeatureCard
                    icon={<Globe />}
                    title="Multilingual Support"
                    description="Accommodates users from diverse linguistic backgrounds."
                  />
                  <FeatureCard
                    icon={<Wallet />}
                    title="UPI Payment"
                    description="Secure and reliable UPI payment with QR code for ticket purchases."
                  />
                  <FeatureCard
                    icon={<TrendingUp />}
                    title="Analytics Dashboard"
                    description="Insights on visitor demographics, ticket sales, and performance."
                  />
                  <FeatureCard
                    icon={<Clock />}
                    title="Queue Management"
                    description="Drastically cut down on queue times and overcrowding."
                  />
                  <FeatureCard
                    icon={<ShieldCheck />}
                    title="Secure & Scalable"
                    description="Proper authentication, data encryption, and future scalability."
                  />
                  <FeatureCard
                    icon={<MessageSquare />}
                    title="Chatbot Interface"
                    description="Intuitive conversation-based ticket booking experience."
                  />
                  <FeatureCard
                    icon={<Building2 />}
                    title="Museum Management"
                    description="Tools for museums to manage exhibitions, tickets and visitors."
                  />
                </div>
              </TabsContent>

              <TabsContent value="benefits" className="mt-8">
                <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                  <BenefitCard
                    title="For Visitors"
                    benefits={[
                      "Skip long queues",
                      "Book tickets anytime, anywhere",
                      "Multilingual support",
                      "Easy payment options",
                      "Digital ticket management",
                    ]}
                  />
                  <BenefitCard
                    title="For Museums"
                    benefits={[
                      "Reduced operational costs",
                      "Valuable visitor insights",
                      "Improved visitor management",
                      "Enhanced visitor experience",
                      "Streamlined ticketing process",
                    ]}
                  />
                  <BenefitCard
                    title="For Management"
                    benefits={[
                      "Data-driven decision making",
                      "Real-time performance monitoring",
                      "Efficient resource allocation",
                      "Reduced manual errors",
                      "Scalable solution for growth",
                    ]}
                  />
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </section>

        {/* CTA Section */}
        <section className="bg-primary/5 py-16 md:py-24">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-4 text-center">
              <div className="space-y-2">
                <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
                  Ready to Transform Your Museum Experience?
                </h2>
                <p className="max-w-[600px] text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
                  Start using Heritage Hub today and provide your visitors with a seamless ticketing experience.
                </p>
              </div>
              <div className="flex flex-col gap-2 min-[400px]:flex-row">
                <Link href="/chat">
                  <Button size="lg" className="gap-1">
                    <MessageSquare className="h-4 w-4" />
                    Try the Chatbot
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        </section>
      </main>

      <Footer />
    </div>
  )
}

function FeatureCard({
  icon,
  title,
  description,
}: {
  icon: React.ReactNode
  title: string
  description: string
}) {
  return (
    <Card>
      <CardContent className="flex flex-col items-center p-6 text-center">
        <div className="mb-4 rounded-full bg-primary/10 p-3 text-primary">{icon}</div>
        <h3 className="mb-2 text-lg font-semibold">{title}</h3>
        <p className="text-sm text-muted-foreground">{description}</p>
      </CardContent>
    </Card>
  )
}

function BenefitCard({ title, benefits }: { title: string; benefits: string[] }) {
  return (
    <Card>
      <CardContent className="p-6">
        <h3 className="mb-3 text-lg font-semibold">{title}</h3>
        <ul className="space-y-2">
          {benefits.map((benefit, index) => (
            <li key={index} className="flex items-center gap-2 text-sm">
              <div className="h-1.5 w-1.5 rounded-full bg-primary"></div>
              {benefit}
            </li>
          ))}
        </ul>
      </CardContent>
    </Card>
  )
}




================================================
File: login-form.tsx
================================================
// components/login-form.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export function LoginForm() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const res = await fetch("/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });

      if (!res.ok) {
        const { error } = await res.json();
        throw new Error(error);
      }

      router.push("/dashboard");
    } catch (err: any) {
      setError(err.message);
    }
  };

  return (
      <Card className="mx-auto max-w-sm mt-10">
        <CardHeader>
          <CardTitle>Login</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
            />
            <Input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
            />
            {error && <p className="text-red-500 text-sm">{error}</p>}
            <Button type="submit" className="w-full">
              Login
            </Button>
          </form>
        </CardContent>
      </Card>
  );
}


================================================
File: logout-confirmation.tsx
================================================
// components/logout-confirmation.tsx
"use client";

import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export function LogoutConfirmation() {
  const router = useRouter();

  const handleLogout = async () => {
    await fetch("/api/auth/logout", { method: "POST" });
    router.push("/login");
  };

  return (
      <Card className="mx-auto max-w-sm mt-10">
        <CardHeader>
          <CardTitle>Logout</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p>Are you sure you want to logout?</p>
          <div className="flex gap-2">
            <Button onClick={handleLogout} variant="destructive">
              Yes, Logout
            </Button>
            <Button onClick={() => router.push("/")} variant="outline">
              No, Cancel
            </Button>
          </div>
        </CardContent>
      </Card>
  );
}


================================================
File: mode-toggle.tsx
================================================
"use client"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"

export function ModeToggle() {
  const { theme, setTheme } = useTheme()

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark")
  }

  return (
    <Button variant="ghost" size="icon" onClick={toggleTheme}>
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}




================================================
File: museum-listing.tsx
================================================
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ArrowLeft, Clock, Filter, MapPin, MessageSquare, Search, Star } from "lucide-react"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"

// Mock museum data
const museums = [
  {
    id: "1",
    name: "National Museum of Art",
    description: "Explore the rich artistic heritage with over 5,000 artworks spanning centuries.",
    image: "/placeholder.svg?height=300&width=500",
    location: "Central District, New Delhi",
    rating: 4.8,
    hours: "9:00 AM - 5:00 PM",
    category: "art",
    popular: true,
  },
  {
    id: "2",
    name: "Natural History Museum",
    description:
      "Discover the wonders of natural history with extensive collections of fossils, minerals, and wildlife exhibits.",
    image: "/placeholder.svg?height=300&width=500",
    location: "Science Park, Mumbai",
    rating: 4.6,
    hours: "10:00 AM - 6:00 PM",
    category: "science",
    popular: true,
  },
  {
    id: "3",
    name: "Science & Technology Museum",
    description: "Interactive exhibits showcasing the evolution of science and technology through the ages.",
    image: "/placeholder.svg?height=300&width=500",
    location: "Tech Valley, Bangalore",
    rating: 4.7,
    hours: "9:00 AM - 7:00 PM",
    category: "science",
    popular: true,
  },
  {
    id: "4",
    name: "Modern Art Gallery",
    description: "Contemporary art from emerging and established artists from around the world.",
    image: "/placeholder.svg?height=300&width=500",
    location: "Arts District, Kolkata",
    rating: 4.5,
    hours: "11:00 AM - 8:00 PM",
    category: "art",
    popular: false,
  },
  {
    id: "5",
    name: "Archaeological Museum",
    description: "Ancient artifacts and archaeological discoveries from the Indian subcontinent.",
    image: "/placeholder.svg?height=300&width=500",
    location: "Heritage Zone, Chennai",
    rating: 4.4,
    hours: "9:00 AM - 5:00 PM",
    category: "history",
    popular: false,
  },
  {
    id: "6",
    name: "Maritime Museum",
    description: "Exhibits on naval history, maritime trade, and oceanography.",
    image: "/placeholder.svg?height=300&width=500",
    location: "Harbor District, Mumbai",
    rating: 4.3,
    hours: "10:00 AM - 6:00 PM",
    category: "history",
    popular: false,
  },
  {
    id: "7",
    name: "Cultural Heritage Museum",
    description: "Celebrating the diverse cultural heritage of India through artifacts, textiles, and performances.",
    image: "/placeholder.svg?height=300&width=500",
    location: "Cultural Center, Jaipur",
    rating: 4.7,
    hours: "9:00 AM - 6:00 PM",
    category: "culture",
    popular: true,
  },
  {
    id: "8",
    name: "Interactive Science Center",
    description: "Hands-on science exhibits designed for learning through play and experimentation.",
    image: "/placeholder.svg?height=300&width=500",
    location: "Education Park, Hyderabad",
    rating: 4.6,
    hours: "9:00 AM - 7:00 PM",
    category: "science",
    popular: false,
  },
]

export function MuseumListing() {
  const [searchQuery, setSearchQuery] = useState("")
  const [activeCategory, setActiveCategory] = useState("all")

  // Filter museums based on search query and category
  const filteredMuseums = museums.filter((museum) => {
    const matchesSearch =
      museum.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      museum.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      museum.location.toLowerCase().includes(searchQuery.toLowerCase())

    const matchesCategory = activeCategory === "all" || museum.category === activeCategory

    return matchesSearch && matchesCategory
  })

  // Filter museums for the "Popular" tab
  const popularMuseums = museums.filter((museum) => museum.popular)

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 p-4 md:p-6">
        <div className="mx-auto max-w-7xl">
          <div className="mb-6 flex items-center gap-2">
            <Link href="/">
              <Button variant="ghost" size="icon">
                <ArrowLeft className="h-5 w-5" />
                <span className="sr-only">Back</span>
              </Button>
            </Link>
            <h1 className="text-2xl font-bold">Explore Museums</h1>
          </div>

          <div className="mb-6">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search museums by name, description, or location..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>

          <Tabs defaultValue="all">
            <div className="flex items-center justify-between mb-4">
              <TabsList>
                <TabsTrigger value="all" onClick={() => setActiveCategory("all")}>
                  All
                </TabsTrigger>
                <TabsTrigger value="popular">Popular</TabsTrigger>
              </TabsList>

              <div className="flex gap-2">
                <Button variant="outline" size="sm" className="hidden md:flex gap-2">
                  <Filter className="h-4 w-4" />
                  Filter
                </Button>
                <div className="hidden md:flex gap-2">
                  <Button
                    variant={activeCategory === "art" ? "default" : "outline"}
                    size="sm"
                    onClick={() => setActiveCategory(activeCategory === "art" ? "all" : "art")}
                  >
                    Art
                  </Button>
                  <Button
                    variant={activeCategory === "science" ? "default" : "outline"}
                    size="sm"
                    onClick={() => setActiveCategory(activeCategory === "science" ? "all" : "science")}
                  >
                    Science
                  </Button>
                  <Button
                    variant={activeCategory === "history" ? "default" : "outline"}
                    size="sm"
                    onClick={() => setActiveCategory(activeCategory === "history" ? "all" : "history")}
                  >
                    History
                  </Button>
                  <Button
                    variant={activeCategory === "culture" ? "default" : "outline"}
                    size="sm"
                    onClick={() => setActiveCategory(activeCategory === "culture" ? "all" : "culture")}
                  >
                    Culture
                  </Button>
                </div>
              </div>
            </div>

            <TabsContent value="all" className="mt-2">
              <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                {filteredMuseums.map((museum) => (
                  <MuseumCard key={museum.id} museum={museum} />
                ))}
              </div>

              {filteredMuseums.length === 0 && (
                <div className="flex flex-col items-center justify-center rounded-lg border border-dashed p-8 text-center">
                  <h3 className="mt-4 text-lg font-semibold">No museums found</h3>
                  <p className="mt-2 text-sm text-muted-foreground">Try adjusting your search or filter criteria.</p>
                </div>
              )}
            </TabsContent>

            <TabsContent value="popular" className="mt-2">
              <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                {popularMuseums.map((museum) => (
                  <MuseumCard key={museum.id} museum={museum} />
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </main>

      <Footer />
    </div>
  )
}

function MuseumCard({ museum }: { museum: (typeof museums)[0] }) {
  return (
    <Card className="overflow-hidden">
      <div className="aspect-video w-full overflow-hidden">
        <img
          src={museum.image || "/placeholder.svg"}
          alt={museum.name}
          className="h-full w-full object-cover transition-transform hover:scale-105"
        />
      </div>
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle>{museum.name}</CardTitle>
            <CardDescription className="flex items-center mt-1">
              <MapPin className="h-4 w-4 mr-1" />
              {museum.location}
            </CardDescription>
          </div>
          <Badge variant="outline" className="flex items-center gap-1">
            <Star className="h-3 w-3 fill-primary text-primary" />
            {museum.rating}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <p className="line-clamp-3 text-sm text-muted-foreground">{museum.description}</p>
        <div className="mt-4 flex items-center text-sm text-muted-foreground">
          <Clock className="mr-1 h-4 w-4" />
          <span>{museum.hours}</span>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Link href={`/museums/${museum.id}`}>
          <Button variant="outline">View Details</Button>
        </Link>
        <Link href="/chat">
          <Button className="gap-1">
            <MessageSquare className="h-4 w-4" />
            Book Tickets
          </Button>
        </Link>
      </CardFooter>
    </Card>
  )
}




================================================
File: profile-page.tsx
================================================
"use client"

import { useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ArrowLeft, Bell, CreditCard, Loader2, LogOut, Settings, User } from "lucide-react"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import { Switch } from "@/components/ui/switch"
import { Separator } from "@/components/ui/separator"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"

export function ProfilePage() {
  const [isLoading, setIsLoading] = useState(false)

  const handleSaveProfile = async () => {
    setIsLoading(true)
    // Simulate API call
    await new Promise((resolve) => setTimeout(resolve, 1500))
    setIsLoading(false)
  }

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 p-4 md:p-6">
        <div className="mx-auto max-w-4xl">
          <div className="mb-6 flex items-center gap-2">
            <Link href="/">
              <Button variant="ghost" size="icon">
                <ArrowLeft className="h-5 w-5" />
                <span className="sr-only">Back</span>
              </Button>
            </Link>
            <h1 className="text-2xl font-bold">My Profile</h1>
          </div>

          <div className="grid gap-6 md:grid-cols-[250px_1fr]">
            <Card>
              <CardContent className="p-6">
                <div className="flex flex-col items-center space-y-4">
                  <Avatar className="h-24 w-24">
                    <AvatarImage src="/placeholder.svg?height=96&width=96" alt="User" />
                    <AvatarFallback>JD</AvatarFallback>
                  </Avatar>
                  <div className="text-center">
                    <h2 className="text-xl font-semibold">John Doe</h2>
                    <p className="text-sm text-muted-foreground">john.doe@example.com</p>
                  </div>
                </div>

                <Separator className="my-6" />

                <nav className="space-y-2">
                  <Button variant="ghost" className="w-full justify-start gap-2">
                    <User className="h-4 w-4" />
                    Personal Information
                  </Button>
                  <Button variant="ghost" className="w-full justify-start gap-2">
                    <Bell className="h-4 w-4" />
                    Notifications
                  </Button>
                  <Button variant="ghost" className="w-full justify-start gap-2">
                    <CreditCard className="h-4 w-4" />
                    Payment Methods
                  </Button>
                  <Button variant="ghost" className="w-full justify-start gap-2">
                    <Settings className="h-4 w-4" />
                    Account Settings
                  </Button>
                  <Link href="/logout">
                    <Button variant="ghost" className="w-full justify-start gap-2 text-destructive">
                      <LogOut className="h-4 w-4" />
                      Logout
                    </Button>
                  </Link>
                </nav>
              </CardContent>
            </Card>

            <div className="space-y-6">
              <Tabs defaultValue="personal">
                <TabsList>
                  <TabsTrigger value="personal">Personal Information</TabsTrigger>
                  <TabsTrigger value="preferences">Preferences</TabsTrigger>
                </TabsList>

                <TabsContent value="personal" className="mt-6 space-y-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>Personal Information</CardTitle>
                      <CardDescription>Update your personal details</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid gap-4 md:grid-cols-2">
                        <div className="space-y-2">
                          <Label htmlFor="firstName">First Name</Label>
                          <Input id="firstName" defaultValue="John" />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="lastName">Last Name</Label>
                          <Input id="lastName" defaultValue="Doe" />
                        </div>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="email">Email</Label>
                        <Input id="email" type="email" defaultValue="john.doe@example.com" />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="phone">Phone Number</Label>
                        <Input id="phone" type="tel" defaultValue="+1 (555) 123-4567" />
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button onClick={handleSaveProfile} disabled={isLoading}>
                        {isLoading ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Saving...
                          </>
                        ) : (
                          "Save Changes"
                        )}
                      </Button>
                    </CardFooter>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle>Address</CardTitle>
                      <CardDescription>Update your address information</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="address">Street Address</Label>
                        <Input id="address" defaultValue="123 Main St" />
                      </div>
                      <div className="grid gap-4 md:grid-cols-2">
                        <div className="space-y-2">
                          <Label htmlFor="city">City</Label>
                          <Input id="city" defaultValue="New York" />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="state">State</Label>
                          <Input id="state" defaultValue="NY" />
                        </div>
                      </div>
                      <div className="grid gap-4 md:grid-cols-2">
                        <div className="space-y-2">
                          <Label htmlFor="zipCode">Zip Code</Label>
                          <Input id="zipCode" defaultValue="10001" />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="country">Country</Label>
                          <Input id="country" defaultValue="United States" />
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button onClick={handleSaveProfile} disabled={isLoading}>
                        {isLoading ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Saving...
                          </>
                        ) : (
                          "Save Changes"
                        )}
                      </Button>
                    </CardFooter>
                  </Card>
                </TabsContent>

                <TabsContent value="preferences" className="mt-6 space-y-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>Notification Preferences</CardTitle>
                      <CardDescription>Manage how you receive notifications</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center justify-between">
                        <div className="space-y-0.5">
                          <Label>Email Notifications</Label>
                          <p className="text-sm text-muted-foreground">
                            Receive email notifications about your bookings
                          </p>
                        </div>
                        <Switch defaultChecked />
                      </div>
                      <Separator />
                      <div className="flex items-center justify-between">
                        <div className="space-y-0.5">
                          <Label>SMS Notifications</Label>
                          <p className="text-sm text-muted-foreground">Receive text messages about your bookings</p>
                        </div>
                        <Switch defaultChecked />
                      </div>
                      <Separator />
                      <div className="flex items-center justify-between">
                        <div className="space-y-0.5">
                          <Label>Marketing Communications</Label>
                          <p className="text-sm text-muted-foreground">
                            Receive updates about new exhibitions, events, and special offers
                          </p>
                        </div>
                        <Switch />
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button onClick={handleSaveProfile} disabled={isLoading}>
                        {isLoading ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Saving...
                          </>
                        ) : (
                          "Save Preferences"
                        )}
                      </Button>
                    </CardFooter>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle>Language & Accessibility</CardTitle>
                      <CardDescription>Customize your experience</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="language">Preferred Language</Label>
                        <select
                          id="language"
                          className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                        >
                          <option value="english">English</option>
                          <option value="spanish">Spanish</option>
                          <option value="french">French</option>
                          <option value="german">German</option>
                          <option value="chinese">Chinese</option>
                          <option value="japanese">Japanese</option>
                        </select>
                      </div>
                      <Separator />
                      <div className="flex items-center justify-between">
                        <div className="space-y-0.5">
                          <Label>High Contrast Mode</Label>
                          <p className="text-sm text-muted-foreground">Increase contrast for better visibility</p>
                        </div>
                        <Switch />
                      </div>
                      <Separator />
                      <div className="flex items-center justify-between">
                        <div className="space-y-0.5">
                          <Label>Larger Text</Label>
                          <p className="text-sm text-muted-foreground">Increase text size throughout the application</p>
                        </div>
                        <Switch />
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button onClick={handleSaveProfile} disabled={isLoading}>
                        {isLoading ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Saving...
                          </>
                        ) : (
                          "Save Preferences"
                        )}
                      </Button>
                    </CardFooter>
                  </Card>
                </TabsContent>
              </Tabs>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  )
}




================================================
File: theme-provider.tsx
================================================
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({
                                  children,
                                  ...props
                              }: React.ComponentProps<typeof NextThemesProvider>) {
    return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}



================================================
File: ticket-management.tsx
================================================
"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import {
  AlertCircle,
  ArrowLeft,
  Building2,
  Calendar,
  Clock,
  Download,
  QrCode,
  Search,
  Ticket,
  Trash2,
  User,
} from "lucide-react"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"

// Mock ticket data
const mockTickets = [
  {
    id: "HH-123456",
    museum: "National Museum of Art",
    date: "2025-04-15",
    time: "10:00",
    adults: 2,
    children: 1,
    totalPrice: 38.0,
    status: "upcoming",
  },
  {
    id: "HH-789012",
    museum: "Natural History Museum",
    date: "2025-04-20",
    time: "14:00",
    adults: 1,
    children: 2,
    totalPrice: 31.0,
    status: "upcoming",
  },
  {
    id: "HH-345678",
    museum: "Science & Technology Museum",
    date: "2025-03-10",
    time: "11:00",
    adults: 2,
    children: 0,
    totalPrice: 30.0,
    status: "past",
  },
  {
    id: "HH-901234",
    museum: "Modern Art Gallery",
    date: "2025-03-05",
    time: "13:00",
    adults: 1,
    children: 1,
    totalPrice: 23.0,
    status: "past",
  },
]

export function TicketManagement() {
  const [tickets, setTickets] = useState(mockTickets)
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedTicket, setSelectedTicket] = useState<(typeof mockTickets)[0] | null>(null)

  // Filter tickets based on search query and tab
  const filterTickets = (status: string) => {
    return tickets
      .filter((ticket) => ticket.status === status)
      .filter(
        (ticket) =>
          ticket.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
          ticket.museum.toLowerCase().includes(searchQuery.toLowerCase()),
      )
  }

  // Handle ticket cancellation
  const handleCancelTicket = (ticketId: string) => {
    setTickets(tickets.map((ticket) => (ticket.id === ticketId ? { ...ticket, status: "cancelled" } : ticket)))
  }

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 p-4 md:p-6">
        <div className="mx-auto max-w-5xl">
          <div className="mb-6 flex items-center gap-2">
            <Link href="/">
              <Button variant="ghost" size="icon">
                <ArrowLeft className="h-5 w-5" />
                <span className="sr-only">Back</span>
              </Button>
            </Link>
            <h1 className="text-2xl font-bold">My Tickets</h1>
          </div>

          <div className="mb-6">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search tickets by ID or museum..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>

          <Tabs defaultValue="upcoming">
            <TabsList className="grid w-full max-w-md grid-cols-3">
              <TabsTrigger value="upcoming">Upcoming</TabsTrigger>
              <TabsTrigger value="past">Past</TabsTrigger>
              <TabsTrigger value="cancelled">Cancelled</TabsTrigger>
            </TabsList>

            <TabsContent value="upcoming" className="mt-6">
              {filterTickets("upcoming").length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2">
                  {filterTickets("upcoming").map((ticket) => (
                    <TicketCard
                      key={ticket.id}
                      ticket={ticket}
                      onView={() => setSelectedTicket(ticket)}
                      onCancel={() => handleCancelTicket(ticket.id)}
                    />
                  ))}
                </div>
              ) : (
                <EmptyState
                  title="No upcoming tickets"
                  description="You don't have any upcoming museum visits. Book a ticket to get started."
                  action={
                    <Link href="/chat">
                      <Button className="gap-2">
                        <Ticket className="h-4 w-4" />
                        Book Tickets
                      </Button>
                    </Link>
                  }
                />
              )}
            </TabsContent>

            <TabsContent value="past" className="mt-6">
              {filterTickets("past").length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2">
                  {filterTickets("past").map((ticket) => (
                    <TicketCard key={ticket.id} ticket={ticket} onView={() => setSelectedTicket(ticket)} isPast />
                  ))}
                </div>
              ) : (
                <EmptyState title="No past tickets" description="You don't have any past museum visits." />
              )}
            </TabsContent>

            <TabsContent value="cancelled" className="mt-6">
              {filterTickets("cancelled").length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2">
                  {filterTickets("cancelled").map((ticket) => (
                    <TicketCard key={ticket.id} ticket={ticket} onView={() => setSelectedTicket(ticket)} isCancelled />
                  ))}
                </div>
              ) : (
                <EmptyState title="No cancelled tickets" description="You don't have any cancelled museum visits." />
              )}
            </TabsContent>
          </Tabs>
        </div>
      </main>

      {/* Ticket Details Dialog */}
      {selectedTicket && (
        <Dialog open={!!selectedTicket} onOpenChange={(open) => !open && setSelectedTicket(null)}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Ticket Details</DialogTitle>
              <DialogDescription>Booking ID: {selectedTicket.id}</DialogDescription>
            </DialogHeader>

            <div className="space-y-4">
              <div className="flex justify-center py-4">
                <div className="bg-white p-4 rounded-lg">
                  <QrCode className="h-32 w-32 text-primary" />
                </div>
              </div>

              <div className="rounded-lg bg-muted p-4 space-y-2">
                <div className="flex justify-between">
                  <span className="flex items-center gap-2">
                    <Building2 className="h-4 w-4" />
                    Museum:
                  </span>
                  <span className="font-medium">{selectedTicket.museum}</span>
                </div>
                <div className="flex justify-between">
                  <span className="flex items-center gap-2">
                    <Calendar className="h-4 w-4" />
                    Date:
                  </span>
                  <span className="font-medium">{selectedTicket.date}</span>
                </div>
                <div className="flex justify-between">
                  <span className="flex items-center gap-2">
                    <Clock className="h-4 w-4" />
                    Time:
                  </span>
                  <span className="font-medium">{selectedTicket.time}</span>
                </div>
                <div className="flex justify-between">
                  <span className="flex items-center gap-2">
                    <User className="h-4 w-4" />
                    Tickets:
                  </span>
                  <span className="font-medium">
                    {selectedTicket.adults} Adult{selectedTicket.adults !== 1 ? "s" : ""},{selectedTicket.children}{" "}
                    Child{selectedTicket.children !== 1 ? "ren" : ""}
                  </span>
                </div>
                <div className="pt-2 border-t flex justify-between">
                  <span className="font-medium">Total Price:</span>
                  <span className="font-bold">â‚¹{selectedTicket.totalPrice.toFixed(2)}</span>
                </div>
              </div>

              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">Status:</span>
                <Badge
                  variant={
                    selectedTicket.status === "upcoming"
                      ? "default"
                      : selectedTicket.status === "past"
                        ? "secondary"
                        : "destructive"
                  }
                >
                  {selectedTicket.status.charAt(0).toUpperCase() + selectedTicket.status.slice(1)}
                </Badge>
              </div>
            </div>

            <DialogFooter className="flex flex-col sm:flex-row gap-2">
              <Button variant="outline" className="gap-2 w-full sm:w-auto" onClick={() => {}}>
                <Download className="h-4 w-4" />
                Download Ticket
              </Button>

              {selectedTicket.status === "upcoming" && (
                <AlertDialog>
                  <AlertDialogTrigger asChild>
                    <Button variant="destructive" className="gap-2 w-full sm:w-auto">
                      <Trash2 className="h-4 w-4" />
                      Cancel Ticket
                    </Button>
                  </AlertDialogTrigger>
                  <AlertDialogContent>
                    <AlertDialogHeader>
                      <AlertDialogTitle>Cancel Ticket</AlertDialogTitle>
                      <AlertDialogDescription>
                        Are you sure you want to cancel this ticket? This action cannot be undone.
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                      <AlertDialogCancel>No, Keep Ticket</AlertDialogCancel>
                      <AlertDialogAction
                        onClick={() => {
                          handleCancelTicket(selectedTicket.id)
                          setSelectedTicket(null)
                        }}
                      >
                        Yes, Cancel Ticket
                      </AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>
              )}
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}

      <Footer />
    </div>
  )
}

function TicketCard({
  ticket,
  onView,
  onCancel,
  isPast = false,
  isCancelled = false,
}: {
  ticket: (typeof mockTickets)[0]
  onView: () => void
  onCancel?: () => void
  isPast?: boolean
  isCancelled?: boolean
}) {
  return (
    <Card>
      <CardHeader className="pb-2">
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="text-lg">{ticket.museum}</CardTitle>
            <CardDescription>Booking ID: {ticket.id}</CardDescription>
          </div>
          <Badge variant={isCancelled ? "destructive" : isPast ? "secondary" : "default"}>
            {isCancelled ? "Cancelled" : isPast ? "Past" : "Upcoming"}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span className="flex items-center gap-1 text-muted-foreground">
              <Calendar className="h-4 w-4" />
              Date:
            </span>
            <span>{ticket.date}</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="flex items-center gap-1 text-muted-foreground">
              <Clock className="h-4 w-4" />
              Time:
            </span>
            <span>{ticket.time}</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="flex items-center gap-1 text-muted-foreground">
              <User className="h-4 w-4" />
              Tickets:
            </span>
            <span>
              {ticket.adults} Adult{ticket.adults !== 1 ? "s" : ""},{ticket.children} Child
              {ticket.children !== 1 ? "ren" : ""}
            </span>
          </div>
          <div className="flex justify-between text-sm pt-2 border-t">
            <span className="font-medium">Total:</span>
            <span className="font-bold">â‚¹{ticket.totalPrice.toFixed(2)}</span>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex gap-2">
        <Button variant="outline" className="w-full" onClick={onView}>
          View Details
        </Button>
        {!isPast && !isCancelled && onCancel && (
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="destructive" size="icon">
                <Trash2 className="h-4 w-4" />
                <span className="sr-only">Cancel Ticket</span>
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Cancel Ticket</AlertDialogTitle>
                <AlertDialogDescription>
                  Are you sure you want to cancel this ticket? This action cannot be undone.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>No, Keep Ticket</AlertDialogCancel>
                <AlertDialogAction onClick={onCancel}>Yes, Cancel Ticket</AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        )}
      </CardFooter>
    </Card>
  )
}

function EmptyState({
  title,
  description,
  action,
}: {
  title: string
  description: string
  action?: React.ReactNode
}) {
  return (
    <div className="flex flex-col items-center justify-center rounded-lg border border-dashed p-8 text-center">
      <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-primary/10">
        <AlertCircle className="h-6 w-6 text-primary" />
      </div>
      <h3 className="mt-4 text-lg font-semibold">{title}</h3>
      <p className="mt-2 text-sm text-muted-foreground">{description}</p>
      {action && <div className="mt-6">{action}</div>}
    </div>
  )
}




================================================
File: ui/alert-dialog.tsx
================================================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



================================================
File: ui/avatar.tsx
================================================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }



================================================
File: ui/badge.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/70",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }



================================================
File: ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



================================================
File: ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}



================================================
File: ui/chart.tsx
================================================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}: React.ComponentProps<"div"> & {
  config: ChartConfig
  children: React.ComponentProps<
    typeof RechartsPrimitive.ResponsiveContainer
  >["children"]
}) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-slot="chart"
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
}

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = "dot",
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey,
}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
  React.ComponentProps<"div"> & {
    hideLabel?: boolean
    hideIndicator?: boolean
    indicator?: "line" | "dot" | "dashed"
    nameKey?: string
    labelKey?: string
  }) {
  const { config } = useChart()

  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }

    const [item] = payload
    const key = `${labelKey || item?.dataKey || item?.name || "value"}`
    const itemConfig = getPayloadConfigFromPayload(config, item, key)
    const value =
      !labelKey && typeof label === "string"
        ? config[label as keyof typeof config]?.label || label
        : itemConfig?.label

    if (labelFormatter) {
      return (
        <div className={cn("font-medium", labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      )
    }

    if (!value) {
      return null
    }

    return <div className={cn("font-medium", labelClassName)}>{value}</div>
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ])

  if (!active || !payload?.length) {
    return null
  }

  const nestLabel = payload.length === 1 && indicator !== "dot"

  return (
    <div
      className={cn(
        "border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl",
        className
      )}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item, index) => {
          const key = `${nameKey || item.name || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload.fill || item.color

          return (
            <div
              key={item.dataKey}
              className={cn(
                "[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5",
                indicator === "dot" && "items-center"
              )}
            >
              {formatter && item?.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {itemConfig?.icon ? (
                    <itemConfig.icon />
                  ) : (
                    !hideIndicator && (
                      <div
                        className={cn(
                          "shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)",
                          {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent":
                              indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          }
                        )}
                        style={
                          {
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          } as React.CSSProperties
                        }
                      />
                    )
                  )}
                  <div
                    className={cn(
                      "flex flex-1 justify-between leading-none",
                      nestLabel ? "items-end" : "items-center"
                    )}
                  >
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">
                        {itemConfig?.label || item.name}
                      </span>
                    </div>
                    {item.value && (
                      <span className="text-foreground font-mono font-medium tabular-nums">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
}

const ChartLegend = RechartsPrimitive.Legend

function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = "bottom",
  nameKey,
}: React.ComponentProps<"div"> &
  Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
    hideIcon?: boolean
    nameKey?: string
  }) {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      className={cn(
        "flex items-center justify-center gap-4",
        verticalAlign === "top" ? "pb-3" : "pt-3",
        className
      )}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)

        return (
          <div
            key={item.value}
            className={cn(
              "[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3"
            )}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        )
      })}
    </div>
  )
}

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



================================================
File: ui/dialog.tsx
================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



================================================
File: ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }



================================================
File: ui/label.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }



================================================
File: ui/select.tsx
================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}



================================================
File: ui/separator.tsx
================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }



================================================
File: ui/sheet.tsx
================================================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



================================================
File: ui/signup-form.tsx
================================================
// components/signup-form.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export function SignupForm() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [firstName, setFirstName] = useState("");
    const [lastName, setLastName] = useState("");
    const [error, setError] = useState("");
    const router = useRouter();

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            const res = await fetch("/api/auth/signup", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email, password, firstName, lastName }),
            });

            if (!res.ok) {
                const { error } = await res.json();
                throw new Error(error);
            }

            router.push("/login");
        } catch (err: any) {
            setError(err.message);
        }
    };

    return (
        <Card className="mx-auto max-w-sm mt-10">
            <CardHeader>
                <CardTitle>Sign Up</CardTitle>
            </CardHeader>
            <CardContent>
                <form onSubmit={handleSubmit} className="space-y-4">
                    <Input
                        type="email"
                        placeholder="Email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                    <Input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                    />
                    <Input
                        placeholder="First Name"
                        value={firstName}
                        onChange={(e) => setFirstName(e.target.value)}
                    />
                    <Input
                        placeholder="Last Name"
                        value={lastName}
                        onChange={(e) => setLastName(e.target.value)}
                    />
                    {error && <p className="text-red-500 text-sm">{error}</p>}
                    <Button type="submit" className="w-full">
                        Sign Up
                    </Button>
                </form>
            </CardContent>
        </Card>
    );
}


================================================
File: ui/switch.tsx
================================================
"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }



================================================
File: ui/tabs.tsx
================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


